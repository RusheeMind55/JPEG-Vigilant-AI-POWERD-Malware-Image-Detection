package com.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;

import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Servlet implementation class DownloadFileCon
 */
@WebServlet("/DownloadFileCon")
public class DownloadFileCon extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public DownloadFileCon() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		//int id=Integer.parseInt(request.getParameter("id"));
				//String user_email=request.getParameter("username");
				String file_name1=request.getParameter("filename1");
				String file_name2=request.getParameter("filename2");
				String file_name3=request.getParameter("filename3");
				String file_name4=request.getParameter("filename4");
				String file_name5=request.getParameter("filename5");
				String file_name6=request.getParameter("filename6");
				String file_name7=request.getParameter("filename7");
				String file_name8=request.getParameter("filename8");
				String file_name9=request.getParameter("filename9");
				String file_name10=request.getParameter("filename10");
				System.out.println("Filename is:"+file_name1);
				System.out.println("Filename is:"+file_name2);
				System.out.println("Filename is:"+file_name3);
				System.out.println("Filename is:"+file_name4);
				System.out.println("Filename is:"+file_name5);
				System.out.println("Filename is:"+file_name6);
				System.out.println("Filename is:"+file_name7);
				System.out.println("Filename is:"+file_name8);
				System.out.println("Filename is:"+file_name9);
				System.out.println("Filename is:"+file_name10);
				//String file_content=request.getParameter("file");
				
				
				/*String filePath = "C:\\Upload\\Files"+File.separator+file_name;*/
					String filePath1 = "C:\\Upload\\Files\\"+File.separator+file_name1;
					String filePath2 = "C:\\Upload\\Files\\"+File.separator+file_name2;
					String filePath3 = "C:\\Upload\\Files\\"+File.separator+file_name3;
					String filePath4 = "C:\\Upload\\Files\\"+File.separator+file_name4;
					String filePath5 = "C:\\Upload\\Files\\"+File.separator+file_name5;
					String filePath6 = "C:\\Upload\\Files\\"+File.separator+file_name6;
					String filePath7 = "C:\\Upload\\Files\\"+File.separator+file_name7;
					String filePath8 = "C:\\Upload\\Files\\"+File.separator+file_name8;
					String filePath9 = "C:\\Upload\\Files\\"+File.separator+file_name9;
					String filePath10 = "C:\\Upload\\Files\\"+File.separator+file_name10;
			        File downloadFile1 = new File(filePath1);
			        File downloadFile2 = new File(filePath2);
			        File downloadFile3 = new File(filePath3);
			        File downloadFile4 = new File(filePath4);
			        File downloadFile5 = new File(filePath5);
			        File downloadFile6 = new File(filePath6);
			        File downloadFile7 = new File(filePath7);
			        File downloadFile8 = new File(filePath8);
			        File downloadFile9 = new File(filePath9);
			        File downloadFile10 = new File(filePath10);
			        FileInputStream inStream1 = new FileInputStream(downloadFile1);
			        FileInputStream inStream2 = new FileInputStream(downloadFile2);
			        FileInputStream inStream3 = new FileInputStream(downloadFile3);
			        FileInputStream inStream4 = new FileInputStream(downloadFile4);
			        FileInputStream inStream5 = new FileInputStream(downloadFile5);
			        FileInputStream inStream6 = new FileInputStream(downloadFile6);
			        FileInputStream inStream7 = new FileInputStream(downloadFile7);
			        FileInputStream inStream8 = new FileInputStream(downloadFile8);
			        FileInputStream inStream9 = new FileInputStream(downloadFile9);
			        FileInputStream inStream10 = new FileInputStream(downloadFile10);
			        // if you want to use a relative path to context root:
			        String relativePath = getServletContext().getRealPath("");
			        System.out.println("relativePath = " + relativePath);
			         
			        // obtains ServletContext
			        ServletContext context = getServletContext();
			         
			        // gets MIME type of the file
			        String mimeType1 = context.getMimeType(filePath1);
			        String mimeType2 = context.getMimeType(filePath2);
			        String mimeType3 = context.getMimeType(filePath3);
			        String mimeType4 = context.getMimeType(filePath4);
			        String mimeType5 = context.getMimeType(filePath5);
			        String mimeType6 = context.getMimeType(filePath6);
			        String mimeType7 = context.getMimeType(filePath7);
			        String mimeType8 = context.getMimeType(filePath8);
			        String mimeType9 = context.getMimeType(filePath9);
			        String mimeType10 = context.getMimeType(filePath10);
			        
			        if (mimeType1 == null) {        
			            // set to binary type if MIME mapping not found
			            mimeType1 = "application/octet-stream";
			        }
			        if (mimeType2 == null) {        
			            // set to binary type if MIME mapping not found
			            mimeType2 = "application/octet-stream";
			        }
			        if (mimeType3 == null) {        
			            // set to binary type if MIME mapping not found
			            mimeType3 = "application/octet-stream";
			        }
			        if (mimeType3 == null) {        
			            // set to binary type if MIME mapping not found
			            mimeType3 = "application/octet-stream";
			        }
			        if (mimeType4 == null) {        
			            // set to binary type if MIME mapping not found
			            mimeType4 = "application/octet-stream";
			        }
			        if (mimeType5 == null) {        
			            // set to binary type if MIME mapping not found
			            mimeType5 = "application/octet-stream";
			        }
			        if (mimeType6 == null) {        
			            // set to binary type if MIME mapping not found
			            mimeType6 = "application/octet-stream";
			        }
			        if (mimeType7 == null) {        
			            // set to binary type if MIME mapping not found
			            mimeType7 = "application/octet-stream";
			        }
			        if (mimeType8 == null) {        
			            // set to binary type if MIME mapping not found
			            mimeType8 = "application/octet-stream";
			        }
			        if (mimeType9 == null) {        
			            // set to binary type if MIME mapping not found
			            mimeType9 = "application/octet-stream";
			        }
			        if (mimeType10 == null) {        
			            // set to binary type if MIME mapping not found
			            mimeType10 = "application/octet-stream";
			        }
			        System.out.println("MIME type: " + mimeType1);
			        System.out.println("MIME type: " + mimeType2);
			        System.out.println("MIME type: " + mimeType3);
			        System.out.println("MIME type: " + mimeType4);
			        System.out.println("MIME type: " + mimeType5);
			        System.out.println("MIME type: " + mimeType6);
			        System.out.println("MIME type: " + mimeType7);
			        System.out.println("MIME type: " + mimeType8);
			        System.out.println("MIME type: " + mimeType9);
			        System.out.println("MIME type: " + mimeType10);
			        
			        // modifies response
			        response.setContentType(mimeType1);
			        response.setContentLength((int) downloadFile1.length());
			        response.setContentType(mimeType2);
			        response.setContentLength((int) downloadFile2.length());
			        response.setContentType(mimeType3);
			        response.setContentLength((int) downloadFile3.length());
			        response.setContentType(mimeType4);
			        response.setContentLength((int) downloadFile4.length());
			        response.setContentType(mimeType5);
			        response.setContentLength((int) downloadFile5.length());
			        response.setContentType(mimeType6);
			        response.setContentLength((int) downloadFile6.length());
			        response.setContentType(mimeType7);
			        response.setContentLength((int) downloadFile7.length());
			        response.setContentType(mimeType8);
			        response.setContentLength((int) downloadFile8.length());
			        response.setContentType(mimeType9);
			        response.setContentLength((int) downloadFile9.length());
			        response.setContentType(mimeType10);
			        response.setContentLength((int) downloadFile10.length());
			        // forces download
			        String headerKey = "Content-Disposition";
			        String headerValue1 = String.format("attachment; filename=\"%s\"", downloadFile1.getName());
			        String headerValue2 = String.format("attachment; filename=\"%s\"", downloadFile2.getName());
			        String headerValue3 = String.format("attachment; filename=\"%s\"", downloadFile3.getName());
			        String headerValue4 = String.format("attachment; filename=\"%s\"", downloadFile4.getName());
			        String headerValue5 = String.format("attachment; filename=\"%s\"", downloadFile5.getName());
			        String headerValue6 = String.format("attachment; filename=\"%s\"", downloadFile6.getName());
			        String headerValue7 = String.format("attachment; filename=\"%s\"", downloadFile7.getName());
			        String headerValue8 = String.format("attachment; filename=\"%s\"", downloadFile8.getName());
			        String headerValue9 = String.format("attachment; filename=\"%s\"", downloadFile9.getName());
			        String headerValue10 = String.format("attachment; filename=\"%s\"", downloadFile10.getName());
			       
			        response.setHeader(headerKey, headerValue1);
			        response.setHeader(headerKey, headerValue2);
			        response.setHeader(headerKey, headerValue3);
			        response.setHeader(headerKey, headerValue4);
			        response.setHeader(headerKey, headerValue5);
			        response.setHeader(headerKey, headerValue6);
			        response.setHeader(headerKey, headerValue7);
			        response.setHeader(headerKey, headerValue8);
			        response.setHeader(headerKey, headerValue9);
			        response.setHeader(headerKey, headerValue10);
			        
			        
			        // obtains response's output stream
			        OutputStream outStream1 = response.getOutputStream();
			        OutputStream outStream2 = response.getOutputStream();
			        OutputStream outStream3 = response.getOutputStream();
			        OutputStream outStream4 = response.getOutputStream();
			        OutputStream outStream5 = response.getOutputStream();
			        OutputStream outStream6 = response.getOutputStream();
			        OutputStream outStream7 = response.getOutputStream();
			        OutputStream outStream8 = response.getOutputStream();
			        OutputStream outStream9 = response.getOutputStream();
			        OutputStream outStream10 = response.getOutputStream();
			     
			        
			        byte[] buffer = new byte[4096];
			        int bytesRead = -1;
			         
			        while ((bytesRead = inStream1.read(buffer)) != -1) {
			            outStream1.write(buffer, 0, bytesRead);
			        }
			        while ((bytesRead = inStream2.read(buffer)) != -1) {
			            outStream2.write(buffer, 0, bytesRead);
			        }
			        while ((bytesRead = inStream3.read(buffer)) != -1) {
			            outStream3.write(buffer, 0, bytesRead);
			        }
			        while ((bytesRead = inStream4.read(buffer)) != -1) {
			            outStream4.write(buffer, 0, bytesRead);
			        }
			        while ((bytesRead = inStream5.read(buffer)) != -1) {
			            outStream5.write(buffer, 0, bytesRead);
			        }
			        while ((bytesRead = inStream6.read(buffer)) != -1) {
			            outStream6.write(buffer, 0, bytesRead);
			        }
			        while ((bytesRead = inStream7.read(buffer)) != -1) {
			            outStream7.write(buffer, 0, bytesRead);
			        }
			        while ((bytesRead = inStream8.read(buffer)) != -1) {
			            outStream8.write(buffer, 0, bytesRead);
			        }
			        while ((bytesRead = inStream9.read(buffer)) != -1) {
			            outStream9.write(buffer, 0, bytesRead);
			        }
			        while ((bytesRead = inStream10.read(buffer)) != -1) {
			            outStream10.write(buffer, 0, bytesRead);
			        }
			        
			         
			        inStream1.close();
			        inStream2.close();
			        inStream3.close();
			        inStream4.close();
			        inStream5.close();
			        inStream6.close();
			        inStream7.close();
			        inStream8.close();
			        inStream9.close();
			        inStream10.close();
			        
			        outStream1.close();     
			        outStream2.close();  
			        outStream3.close();  
			        outStream4.close();  
			        outStream5.close();  
			        outStream6.close();  
			        outStream7.close();  
			        outStream8.close();  
			        outStream9.close();  
			        outStream10.close();  
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}
